# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import scan_pb2 as scan__pb2


class pocStub(object):
    """`service` 是用来给gRPC服务定义方法的, 格式固定, 类似于Golang中定义一个接口
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.pocscan = channel.unary_unary(
                '/burp.rpc.poc/pocscan',
                request_serializer=scan__pb2.Poc_Request.SerializeToString,
                response_deserializer=scan__pb2.Poc_Response.FromString,
                )


class pocServicer(object):
    """`service` 是用来给gRPC服务定义方法的, 格式固定, 类似于Golang中定义一个接口
    """

    def pocscan(self, request, context):
        """一元模式(在一次调用中, 客户端只能向服务器传输一次请求数据, 服务器也只能返回一次响应)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_pocServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'pocscan': grpc.unary_unary_rpc_method_handler(
                    servicer.pocscan,
                    request_deserializer=scan__pb2.Poc_Request.FromString,
                    response_serializer=scan__pb2.Poc_Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'burp.rpc.poc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class poc(object):
    """`service` 是用来给gRPC服务定义方法的, 格式固定, 类似于Golang中定义一个接口
    """

    @staticmethod
    def pocscan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/burp.rpc.poc/pocscan',
            scan__pb2.Poc_Request.SerializeToString,
            scan__pb2.Poc_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
